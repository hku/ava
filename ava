#!/bin/bash
# this is ava!

function print_usage(){
  echo "ava 1 # 0, 1, 2, 3"
  echo "ava 1 ls"
  echo "ava scp"
  echo "ava push"
  echo "ava own"
  echo "ava start"
  echo "ava stop"
  echo "ava show"
  echo "ava memo"
}

function ssh_server(){

  if [[ $1 == "1" ]]; then
    port=2220
    host="ray@192.168.74.251"
  elif [[ $1 == "2" ]]; then
    port=2221
    host="ray@192.168.74.251"  
  elif [[ $1 == "3" ]]; then
    port=2222
    host="ray@192.168.74.251"
  fi

  ssh -p $port $host ${@:2}
}


function scp_server(){
  if [[ $# == 0 ]]; then
  	echo "scp from or to servers, examples:" 
  	echo "ava scp 1/home/ray/abc.txt ~/"
  	echo "ava scp 1/home/ray/folder ~/"
  	exit 0
  elif [[ $# == 1 ]]; then
  	scp_server $1 ./
  fi

  if [[ ${1:0:2} =~ (1|2|3)(\~|\/) ]]; then
  	server_flag=${1:0:1}
  	server_path=${1:1}
  	local_path=$2
  	from=0 #from server to local
  elif [[ ${2:0:2} =~ (1|2|3)(\~|\/) ]]; then
  	server_flag=${2:0:1}
  	server_path=${2:1}
  	local_path=$1
  	from=1 #from local to server
  else
  	echo "wrong scp params, try: ava scp 1/path/to/file ./"
  	exit 1
  fi

  if [[ $server_flag == "1" ]]; then
    port=2220
    host="ray@192.168.74.251"
  elif [[ $server_flag == "2" ]]; then
    port=2221
    host="ray@192.168.74.251"  
  elif [[ $server_flag == "3" ]]; then
    port=2222
    host="ray@192.168.74.251"
  fi


  if [[ $from == 0 ]]; then
    if ssh -p $port $host "[[ -f $server_path ]]"; then
      folder_flag=""
    elif ssh -p $port $host "[[ -d $server_path ]]"; then
      folder_flag="-r"
    else
      echo "server path not exits or ssh fail"
      exit 1
    fi
  else
  	if [[ -f $local_path ]]; then
      folder_flag=""
    elif [[ -d $local_path ]]; then
      folder_flag="-r"
    else
      echo "local path not exits"
      exit 1
    fi
  fi

  if [[ $from == 0 ]]; then
    scp -P $port $folder_flag $host":"$server_path $local_path
  else
    scp -P $port $folder_flag $local_path $host":"$server_path
  fi
}

############################################

TOMCAT_HOME="/usr/local/tomcat/apache-tomcat-7.0.85"
if [[ -z $HADOOP_HOME ]]; then
  HADOOP_HOME="/usr/local/hadoop"
fi

function start_service(){
  if [[ $1 == "tomcat" ]]; then
    $TOMCAT_HOME/bin/startup.sh
  elif [[ $1 == "hadoop" ]]; then
    $HADOOP_HOME/sbin/start-dfs.sh
  elif [[ $1 == "tf" ]]; then
    sudo docker run -d --name tfcpu  -v /home/ray/tf:/root/tf -p 8080:8080 tensorflow/tensorflow:1.3.0
    sudo docker ps
    echo "sudo docker exec -it tfcpu bash"
  else
    echo "examples:"
    echo "ava start tomcat"
    echo "ava start hadoop"
    exit
  fi

  echo "show port in 2s..."
  sleep 2
  
  for pid in `ps aux | grep $1 | awk '{print $2}'`
    do
      sudo netstat -tulpn | grep $pid
    done
}

function stop_service(){
  if [[ $1 == "tomcat" ]]; then
    $TOMCAT_HOME/bin/shutdown.sh
  elif [[ $1 == "hadoop" ]]; then
    $HADOOP_HOME/sbin/stop-dfs.sh
  elif [[ $1 == "tf" ]]; then
    sudo docker rm -f tfcpu
  else
    echo "examples:"
    echo "ava stop tomcat"
    echo "ava stop hadoop" 
    exit   
  fi
}

function watch_file() {
  chsum1=""
  if [[ $# < 2 ]]; then
    echo "examples:"
    echo "ava watch /path/to/watched mvn compile"
    exit
  fi

  watched_path=$1

  if [[ -f $watched_path || -d $watched_path ]]; then
    echo "watching $watched_path"
  else
    echo "$watched_path not exist!"
    exit 1
  fi


  while [[ true ]]
  do
      chsum2=`find $watched_path -type f -exec md5sum {} \;`
      if [[ $chsum1 != $chsum2 ]] ; then           
          ${@:2}
          chsum1=$chsum2
      fi
      sleep 1
  done    
}

############################################

function show_info(){
  case $1 in
    port)
      if [[ -z $2 ]]; then
        sudo netstat -tulpn | less
      else
        echo -e "Proto\tRecv-Q\tSend-Q\tLocal Address\t\tForeign Address\t\tState\tPID/Program name"
        sudo netstat -tulpn | grep "LISTEN" | grep $2

        echo -e "\nUSER\tPID\t%CPU\t%MEM\tVSZ\tRSS\tTTY\tSTA\tSTART\tTIME\tCOMMAND"
        for pid in `sudo netstat -tulpn | grep "LISTEN" | grep $2 | awk '{print $7}' | awk -F "/" '{print $1}'`
          do
            ps aux| grep $pid | grep -v "grep $pid"
          done
      fi
      ;;
    app)
      if [[ -z $2 ]]; then
        ps aux | less
      else
        echo -e "USER\tPID\t%CPU\t%MEM\tVSZ\tRSS\tTTY\tSTA\tSTART\tTIME\tCOMMAND"
        ps aux | grep $2 | grep -v "grep $2" | grep -v "show app $2"

        echo -e "\nProto\tRecv-Q\tSend-Q\tLocal Address\t\tForeign Address\t\tState\tPID/Program name"
        for pid in `ps aux | grep $2 | awk '{print $2}'`
          do
            sudo netstat -tulpn | grep $pid
          done
      fi
      ;;
    size)
      if [[ -z $2 ]]; then
        df -h
      elif [[ -d $2 ]]; then
        du -hs $2
      elif [[ -f $2 ]]; then 
        ls -lh $2 | awk '{print $5}'
      fi
      ;;
    cpu|mem|os|status)
      echo "number of cpus: "`cat /proc/cpuinfo | grep "model name" | wc -l`
      cat /proc/cpuinfo | grep "model name"
      cat /proc/meminfo | head -3
      cat /etc/lsb-release
      ;;     
    *)
      echo "examples:"
      echo "ava show port 8080"
      echo "ava show app java"
      echo "ava show size file_or_folder"
      echo "ava show status"
  esac
}

############################################
############################################
############################################


if [[ $# == 0 ]]; then
  print_usage
  exit
fi

COMMAND=$1

case $COMMAND in
  0|1|2|3)
    ssh_server $@
    exit
    ;;
  scp)
	scp_server ${@:2}
	;;	
  start)
    start_service $2
    exit
    ;;
  stop)
    stop_service $2
    exit
    ;;
  push)
    git pull
    git add -A
    git commit -m "commit"
    git push origin master
    echo "git pull-add-commit-push"
    exit
    ;;

  own)
    sudo chown -R $USER:$USER $PWD
    echo "sudo chown -R $USER:$USER $PWD"
    exit
    ;;
  watch) 
    watch_file ${@:2}
    ;;
  show)
    if [[ $# == 1 ]]; then
      show_info -h
    else
      show_info "${@:2}"
    fi
    exit
    ;;  
  memo)
    echo "git remote set-url origin git@github.com:hku/ava.git"
    echo "sudo dpkg -i xxx.deb"
    echo "watch -n 1 top"
    echo "jps"
    exit
    ;;
esac
